name: vercel-deploy

on:
  push:
    branches: ["main"]
  workflow_dispatch: {}

concurrency:
  group: vercel-deploy-main
  cancel-in-progress: false

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
      # Optional if your project is under a Team:
      VERCEL_TEAM_ID: ${{ secrets.VERCEL_TEAM_ID }}
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install deps
        run: npm ci

      - name: Vercel project link
        run: |
          npx vercel link --yes \
            ${VERCEL_TEAM_ID:+--scope "$VERCEL_TEAM_ID"} \
            --project "$VERCEL_PROJECT_ID" \
            --token "$VERCEL_TOKEN"

      - name: Pull env (production) to file
        run: |
          npx vercel env pull .env.production.local \
            ${VERCEL_TEAM_ID:+--scope "$VERCEL_TEAM_ID"} \
            --environment=production \
            --token "$VERCEL_TOKEN"

      - name: Apply Prisma migrations (production DB)
        # why: ensure schema is up-to-date before we build & ship
        run: |
          set -e
          set -o allexport
          source .env.production.local
          set +o allexport
          npx prisma generate
          npx prisma migrate deploy

      - name: Build application (uses pulled env)
        run: |
          npx vercel build --prod \
            ${VERCEL_TEAM_ID:+--scope "$VERCEL_TEAM_ID"} \
            --token "$VERCEL_TOKEN"

      - name: Deploy prebuilt output
        id: deploy
        run: |
          URL=$(npx vercel deploy --prebuilt --prod \
            ${VERCEL_TEAM_ID:+--scope "$VERCEL_TEAM_ID"} \
            --token "$VERCEL_TOKEN")
          echo "url=$URL" >> "$GITHUB_OUTPUT"

      - name: Echo deploy URL
        run: |
          echo "Deployed: ${{ steps.deploy.outputs.url }}"
