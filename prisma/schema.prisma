generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model AppointmentRequest {
  id               String    @id @default(uuid())
  name             String
  phone            String
  email            String?
  preferredDate    String
  preferredTime    String
  reason           String
  patientAge       Int?
  patientGender    String?
  consultationType String    @default("IN_PERSON")
  consultationDate DateTime?
  status           String    @default("NEW")
  identifier       String?
  notes            String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  @@index([status, createdAt])
  @@index([identifier])
  @@index([consultationType, consultationDate])
  @@index([phone])
  @@index([email])
  @@index([name])
}

model ExitFeedback {
  id          String   @id @default(uuid())
  outcome     String
  explanation String?
  email       String?
  pagePath    String?
  createdAt   DateTime @default(now())

  @@index([createdAt])
  @@index([outcome])
}

model SiteMetric {
  key       String   @id
  count     Int      @default(0)
  updatedAt DateTime @updatedAt
}

model DonationSupporter {
  id                    String    @id @default(uuid())
  firstName             String
  normalizedName        String    @unique
  totalAmount           Int       @default(0)
  donationCount         Int       @default(0)
  lastChannel           String?
  lastContributionAt    DateTime?
  publicAcknowledgement Boolean   @default(false)
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  transactions          DonationTransaction[]

  @@index([donationCount, totalAmount])
  @@index([publicAcknowledgement, lastContributionAt, donationCount])
  @@index([lastContributionAt])
}

model DonationTransaction {
  id                   String              @id @default(uuid())
  phone                String
  normalizedPhone      String
  amount               Int
  firstName            String
  accountReference     String
  checkoutRequestId    String?
  merchantRequestId    String?
  mpesaReceiptNumber   String?
  resultCode           String?
  resultDescription    String?
  status               String              @default("PENDING")
  failureReason        String?
  callbackMetadata     String?
  supporterId          String?
  supporter            DonationSupporter?  @relation(fields: [supporterId], references: [id], onDelete: SetNull)
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt

  @@unique([checkoutRequestId])
  @@index([normalizedPhone, createdAt])
  @@index([status, createdAt])
  @@index([createdAt])
  @@index([supporterId, createdAt])
}

model ShopOrder {
  id              String    @id @default(uuid())
  reference       String    @unique
  customerName    String
  phone           String
  contactChannel  String?
  itemsJson       String
  totalAmount     Int
  notes           String?
  status          String    @default("PENDING")
  statusChangedAt DateTime?
  handledBy       String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  notifications OrderNotification[]

  @@index([status, createdAt])
  @@index([reference])
  @@index([phone])
  @@index([customerName])
}

model AdminUser {
  id               String              @id @default(uuid())
  email            String              @unique
  passwordHash     String
  role             String              @default("PHARMACY")
  twoFactorEnabled Boolean             @default(false)
  totpSecretEnc    String?
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
  passwordResets   AdminPasswordReset[]
  logs             AuditLog[]

  @@index([role, createdAt])
}

model AuditLog {
  id        String    @id @default(uuid())
  adminId   String
  admin     AdminUser @relation(fields: [adminId], references: [id])
  action    String
  route     String
  ip        String?
  payload   String?
  createdAt DateTime  @default(now())

  @@index([adminId, createdAt])
  @@index([createdAt])
}

model OrderNotification {
  id           String    @id @default(uuid())
  orderId      String
  order        ShopOrder @relation(fields: [orderId], references: [id], onDelete: Cascade)
  channel      String    @default("EMAIL")
  status       String    @default("SENT")
  recipient    String?
  summary      String
  metadataJson String?
  deliveredAt  DateTime?
  createdAt    DateTime  @default(now())

  @@index([orderId, createdAt])
  @@index([channel, createdAt])
}

model AntifraudReport {
  id                 String   @id @default(uuid())
  reporterAlias      String?
  reporterContact    String?
  suspectName        String?
  suspectPhone       String?
  transactionAmount  Int?
  transactionReason  String
  transactionDate    DateTime?
  evidenceSummary    String
  evidenceUrl        String?
  identifier         String?
  status             String   @default("NEW")
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  @@index([status, createdAt])
  @@index([identifier])
  @@index([suspectPhone])
  @@index([reporterContact])
}

model AdminPasswordReset {
  id           String    @id @default(uuid())
  tokenHash    String    @unique
  email        String
  adminUserId  String
  adminUser    AdminUser @relation(fields: [adminUserId], references: [id], onDelete: Cascade)
  expiresAt    DateTime
  usedAt       DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@index([expiresAt])
}
